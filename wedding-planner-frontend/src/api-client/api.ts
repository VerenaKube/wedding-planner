/* tslint:disable */
/* eslint-disable */
/**
 * Wedding-Planner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const Age = {
    Child: 'CHILD',
    Teen: 'TEEN',
    YoungAdult: 'YOUNG_ADULT',
    Adult: 'ADULT',
    Senior: 'SENIOR'
} as const;

export type Age = typeof Age[keyof typeof Age];


/**
 * 
 * @export
 * @interface GuestCircleDto
 */
export interface GuestCircleDto {
    /**
     * 
     * @type {string}
     * @memberof GuestCircleDto
     */
    'name'?: string;
    /**
     * 
     * @type {Array<GuestDto>}
     * @memberof GuestCircleDto
     */
    'members'?: Array<GuestDto>;
}
/**
 * 
 * @export
 * @interface GuestDto
 */
export interface GuestDto {
    /**
     * 
     * @type {string}
     * @memberof GuestDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GuestDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {Age}
     * @memberof GuestDto
     */
    'age'?: Age;
    /**
     * 
     * @type {Array<string>}
     * @memberof GuestDto
     */
    'groups'?: Array<string>;
}


/**
 * 
 * @export
 * @interface GuestMinimalDto
 */
export interface GuestMinimalDto {
    /**
     * 
     * @type {string}
     * @memberof GuestMinimalDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GuestMinimalDto
     */
    'lastName'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RuleType = {
    Friend: 'FRIEND',
    Enemy: 'ENEMY'
} as const;

export type RuleType = typeof RuleType[keyof typeof RuleType];


/**
 * 
 * @export
 * @interface SeatingRuleDto
 */
export interface SeatingRuleDto {
    /**
     * 
     * @type {string}
     * @memberof SeatingRuleDto
     */
    'id'?: string;
    /**
     * 
     * @type {GuestMinimalDto}
     * @memberof SeatingRuleDto
     */
    'firstGuest'?: GuestMinimalDto;
    /**
     * 
     * @type {GuestMinimalDto}
     * @memberof SeatingRuleDto
     */
    'secondGuest'?: GuestMinimalDto;
    /**
     * 
     * @type {RuleType}
     * @memberof SeatingRuleDto
     */
    'ruleType'?: RuleType;
}


/**
 * 
 * @export
 * @interface SeatingplanCreationRequest
 */
export interface SeatingplanCreationRequest {
    /**
     * 
     * @type {string}
     * @memberof SeatingplanCreationRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SeatingplanCreationRequest
     */
    'weddingDate': string;
    /**
     * 
     * @type {string}
     * @memberof SeatingplanCreationRequest
     */
    'bride': string;
    /**
     * 
     * @type {string}
     * @memberof SeatingplanCreationRequest
     */
    'groom': string;
}
/**
 * 
 * @export
 * @interface SeatingplanDto
 */
export interface SeatingplanDto {
    /**
     * 
     * @type {string}
     * @memberof SeatingplanDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatingplanDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatingplanDto
     */
    'weddingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatingplanDto
     */
    'bride'?: string;
    /**
     * 
     * @type {string}
     * @memberof SeatingplanDto
     */
    'groom'?: string;
    /**
     * 
     * @type {Array<GuestCircleDto>}
     * @memberof SeatingplanDto
     */
    'guestList'?: Array<GuestCircleDto>;
    /**
     * 
     * @type {TableDataDto}
     * @memberof SeatingplanDto
     */
    'tableData'?: TableDataDto;
    /**
     * 
     * @type {Array<SeatingRuleDto>}
     * @memberof SeatingplanDto
     */
    'seatingRules'?: Array<SeatingRuleDto>;
    /**
     * 
     * @type {SeatingplanSolutionDto}
     * @memberof SeatingplanDto
     */
    'solution'?: SeatingplanSolutionDto;
}
/**
 * 
 * @export
 * @interface SeatingplanSolutionDto
 */
export interface SeatingplanSolutionDto {
    /**
     * 
     * @type {Array<TableDto>}
     * @memberof SeatingplanSolutionDto
     */
    'tables'?: Array<TableDto>;
}
/**
 * 
 * @export
 * @interface TableDataDto
 */
export interface TableDataDto {
    /**
     * 
     * @type {TableType}
     * @memberof TableDataDto
     */
    'type'?: TableType;
    /**
     * 
     * @type {number}
     * @memberof TableDataDto
     */
    'seatsPerTable'?: number;
    /**
     * 
     * @type {number}
     * @memberof TableDataDto
     */
    'numberOfTables'?: number;
}


/**
 * 
 * @export
 * @interface TableDto
 */
export interface TableDto {
    /**
     * 
     * @type {number}
     * @memberof TableDto
     */
    'tableNumber'?: number;
    /**
     * 
     * @type {Array<GuestCircleDto>}
     * @memberof TableDto
     */
    'guests'?: Array<GuestCircleDto>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TableType = {
    Round: 'ROUND',
    Square: 'SQUARE',
    WeddingTable: 'WEDDING_TABLE'
} as const;

export type TableType = typeof TableType[keyof typeof TableType];


/**
 * 
 * @export
 * @interface ValidationResponse
 */
export interface ValidationResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationResponse
     */
    'messages'?: Array<string>;
}

/**
 * SeatingplanApi - axios parameter creator
 * @export
 */
export const SeatingplanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a seatingplan and returns the generated id.
         * @param {SeatingplanCreationRequest} [seatingplanCreationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSeatingplan: async (seatingplanCreationRequest?: SeatingplanCreationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/seatingplans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seatingplanCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a good seatingplan
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSeatingplanSolution: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createSeatingplanSolution', 'id', id)
            const localVarPath = `/seatingplans/{id}/solutions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a seatingplan for a given ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeatingplan: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSeatingplan', 'id', id)
            const localVarPath = `/seatingplans/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all seatingplans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSeatingplans: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/seatingplans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a seatingplan for a given ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeatingplanById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSeatingplanById', 'id', id)
            const localVarPath = `/seatingplans/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a seatingplan for a given id
         * @param {string} id 
         * @param {SeatingplanDto} [seatingplanDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeatingplan: async (id: string, seatingplanDto?: SeatingplanDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSeatingplan', 'id', id)
            const localVarPath = `/seatingplans/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seatingplanDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validates an existing seatingplan
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateSeatingplan: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('validateSeatingplan', 'id', id)
            const localVarPath = `/seatingplans/{id}/validations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeatingplanApi - functional programming interface
 * @export
 */
export const SeatingplanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SeatingplanApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a seatingplan and returns the generated id.
         * @param {SeatingplanCreationRequest} [seatingplanCreationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSeatingplan(seatingplanCreationRequest?: SeatingplanCreationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSeatingplan(seatingplanCreationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeatingplanApi.createSeatingplan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a good seatingplan
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSeatingplanSolution(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeatingplanSolutionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSeatingplanSolution(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeatingplanApi.createSeatingplanSolution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes a seatingplan for a given ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSeatingplan(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSeatingplan(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeatingplanApi.deleteSeatingplan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns all seatingplans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSeatingplans(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SeatingplanDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSeatingplans(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeatingplanApi.getAllSeatingplans']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a seatingplan for a given ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeatingplanById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeatingplanDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeatingplanById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeatingplanApi.getSeatingplanById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates a seatingplan for a given id
         * @param {string} id 
         * @param {SeatingplanDto} [seatingplanDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSeatingplan(id: string, seatingplanDto?: SeatingplanDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSeatingplan(id, seatingplanDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeatingplanApi.updateSeatingplan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Validates an existing seatingplan
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateSeatingplan(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateSeatingplan(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeatingplanApi.validateSeatingplan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SeatingplanApi - factory interface
 * @export
 */
export const SeatingplanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SeatingplanApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a seatingplan and returns the generated id.
         * @param {SeatingplanCreationRequest} [seatingplanCreationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSeatingplan(seatingplanCreationRequest?: SeatingplanCreationRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createSeatingplan(seatingplanCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a good seatingplan
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSeatingplanSolution(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SeatingplanSolutionDto> {
            return localVarFp.createSeatingplanSolution(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a seatingplan for a given ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSeatingplan(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSeatingplan(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all seatingplans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSeatingplans(options?: RawAxiosRequestConfig): AxiosPromise<Array<SeatingplanDto>> {
            return localVarFp.getAllSeatingplans(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a seatingplan for a given ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeatingplanById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SeatingplanDto> {
            return localVarFp.getSeatingplanById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a seatingplan for a given id
         * @param {string} id 
         * @param {SeatingplanDto} [seatingplanDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSeatingplan(id: string, seatingplanDto?: SeatingplanDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSeatingplan(id, seatingplanDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validates an existing seatingplan
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateSeatingplan(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ValidationResponse> {
            return localVarFp.validateSeatingplan(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeatingplanApi - object-oriented interface
 * @export
 * @class SeatingplanApi
 * @extends {BaseAPI}
 */
export class SeatingplanApi extends BaseAPI {
    /**
     * 
     * @summary Creates a seatingplan and returns the generated id.
     * @param {SeatingplanCreationRequest} [seatingplanCreationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeatingplanApi
     */
    public createSeatingplan(seatingplanCreationRequest?: SeatingplanCreationRequest, options?: RawAxiosRequestConfig) {
        return SeatingplanApiFp(this.configuration).createSeatingplan(seatingplanCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a good seatingplan
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeatingplanApi
     */
    public createSeatingplanSolution(id: string, options?: RawAxiosRequestConfig) {
        return SeatingplanApiFp(this.configuration).createSeatingplanSolution(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a seatingplan for a given ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeatingplanApi
     */
    public deleteSeatingplan(id: string, options?: RawAxiosRequestConfig) {
        return SeatingplanApiFp(this.configuration).deleteSeatingplan(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all seatingplans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeatingplanApi
     */
    public getAllSeatingplans(options?: RawAxiosRequestConfig) {
        return SeatingplanApiFp(this.configuration).getAllSeatingplans(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a seatingplan for a given ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeatingplanApi
     */
    public getSeatingplanById(id: string, options?: RawAxiosRequestConfig) {
        return SeatingplanApiFp(this.configuration).getSeatingplanById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a seatingplan for a given id
     * @param {string} id 
     * @param {SeatingplanDto} [seatingplanDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeatingplanApi
     */
    public updateSeatingplan(id: string, seatingplanDto?: SeatingplanDto, options?: RawAxiosRequestConfig) {
        return SeatingplanApiFp(this.configuration).updateSeatingplan(id, seatingplanDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validates an existing seatingplan
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeatingplanApi
     */
    public validateSeatingplan(id: string, options?: RawAxiosRequestConfig) {
        return SeatingplanApiFp(this.configuration).validateSeatingplan(id, options).then((request) => request(this.axios, this.basePath));
    }
}



